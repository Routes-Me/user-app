@page "/forgotpassword"
@layout AccountLayout
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@using System.Text.Json;

<style>
    .invalid, .valid.modified:not([type=checkbox]) {
        outline: none !important;
    }


    .border-bottom-light-blue:last-child {
        border-bottom: none;
    }

    .hide-resend-button {
        display: none;
    }

    .show-resend-button {
        display: block;
    }

    #resendotp {
        background: none !important;
        border: none;
        color: white;
        text-decoration: underline;
        cursor: pointer;
        outline: none;
        outline-offset: initial;
    }

        #resendotp:focus {
            outline: 0;
        }
</style>
<div class="login-area recovery-pass-area">
    <div class="topbar"> <a href="/"><i class="fas fa-chevron-left"></i> Login</a> </div>
    <div class="title">
        <h2>Recover Password</h2>
        <p>Enter your email, we will send a link to reset your password</p>
    </div>
    <AlertMessage Message="@message" MessageType="@messageType" />
    <div class="form-holder">
        <EditForm Model="model" OnValidSubmit="ResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-filds">
                <div class="form-group m-0">
                    <RadzenTextBox @bind-Value="model.Email" Placeholder="Email" class="form-control border-bottom-0 reset-email"></RadzenTextBox>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-white btn-lg signup-submit disabled">Send</button>
            </div>
        </EditForm>
        <div class="form-group mt-4">
            <div>Need help?</div>
            <a href="mailto:info@routesme.com">info@routesme.com</a>
        </div>
    </div>
</div>
<div class="loader d-none">
    <i class="fas fa-spinner fa-spin"></i>
</div>

@code {
    ResetPassword model = new ResetPassword();
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    string displaySpinner = "d-none";

    public async Task ResetPassword()
    {
        string Url = "api/forgotpassword?email=" + model.Email;
        var result = await Http.PostAsync(Url, null).ConfigureAwait(false);
        var responseData = await result.Content.ReadAsStringAsync();
        Response response = new Response();
        response = JsonSerializer.Deserialize<Response>(responseData);
        if (response.status == true)
        {
            message = response.message;
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = response.message;
            messageType = Models.AlertMessageType.Error;
        }
        displaySpinner = "d-none";
    }
}
