@page "/signup"
@layout AccountLayout
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@using System.Text
@using System.Text.Json;
@using System.Text.RegularExpressions;
@using Encryption;

<div class="login-area">
    <div class="topbar"> <a href="/"><i class="fas fa-chevron-left"></i> Login</a> </div>
    <div class="title">
        <h2>Creat Account</h2>
        <p>Connect with Routes and get discount promotions and free rides</p>
    </div>
    <AlertMessage Message="@message" MessageType="@messageType" />
    <div class="form-holder">
        <EditForm Model="model" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-filds">
                <div class="form-group m-0">
                    <RadzenTextBox @bind-Value="model.Name" Placeholder="Full Name" class="form-control border-bottom-light-blue txt-name"></RadzenTextBox>
                </div>
                <div class="form-group  m-0">
                    <RadzenTextBox @bind-Value="model.UserName" Placeholder="Email or Phone Number" Change="CheckEmailOrPhone" class="form-control border-bottom-light-blue txt-username"></RadzenTextBox>
                    <div class="icon-hold @otpSentProgress"><img src="images/icon-progress-dots.png" width="14" height="4" alt="" /></div>
                    <div class="icon-hold otp-send-success @otpSentSuccess"><i class="fas fa-check text-success"></i></div>
                </div>
                <div class="form-group m-0">
                    <RadzenPassword type="password" @bind-Value="model.Password" Placeholder="Password" Visible="@isEmail" class="form-control txt-password" id="password"></RadzenPassword>
                    <div class="icon-hold d-none icon-eye"><i class="fas fa-eye text-light"></i></div>
                </div>
                <div class="form-group m-0">
                    <RadzenTextBox @bind-Value="model.Otp" Visible="@isPhone" class="form-control txt-otp" id="otpbox"></RadzenTextBox>
                    <div class="icon-hold resend-code d-none" id="resendotp"><RadzenButton ButtonType="Radzen.ButtonType.Button" Click="ResendOTP"> <small>resend otp</small></RadzenButton></div>
                </div>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-white btn-lg signup-submit disabled">Create</button>
            </div>
        </EditForm>
    </div>
</div>
<div class="loader @displaySpinner">
    <i class="fas fa-spinner fa-spin"></i>
</div>

@code {

    RegistrationModel model = new RegistrationModel();
    bool isPhone = false;
    bool isEmail = true;
    string otpSentSuccess = "d-none";
    string otpSentProgress = "d-none";
    string displaySpinner = "d-none";
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    protected async override Task OnInitializedAsync()
    {
      
        Http.BaseAddress = new Uri("http://localhost:51770");
    }

    public async Task CheckEmailOrPhone()
    {
        if (Regex.IsMatch(model.UserName, @"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}", RegexOptions.IgnoreCase))
        {
            isPhone = false;
            isEmail = true;
        }
        else if (Regex.IsMatch(model.UserName, @"(\d*-)?\d{10}", RegexOptions.IgnoreCase))
        {
            isPhone = true;
            isEmail = false;
            otpSentProgress = "";
            if (!string.IsNullOrEmpty(model.UserName))
            {
                await JSRuntime.InvokeVoidAsync("stopTimer");
                await SendOtp(model.UserName);
            }
        }
    }

    public async Task SendOtp(string PhoneNumber)
    {
        SendOTPModel sendOtpModel = new SendOTPModel()
        {
            Phone = PhoneNumber
        };
        var serializedValue = JsonSerializer.Serialize(sendOtpModel);
        var stringContent = new StringContent(serializedValue, Encoding.UTF8, "application/json");
        var result = await Http.PostAsync("/api/qrsendotp", stringContent).ConfigureAwait(false);
        var responseData = await result.Content.ReadAsStringAsync();
        Response response = new Response();
        response = JsonSerializer.Deserialize<Response>(responseData);
        if (response.status == true)
        {
            otpSentProgress = "d-none";
            otpSentSuccess = "";
            await JSRuntime.InvokeVoidAsync("timer", 240);
        }
        else
        {
            otpSentProgress = "d-none";
            message = response.message;
            messageType = Models.AlertMessageType.Error;
        }
    }

    public async Task ResendOTP()
    {
        model.Otp = string.Empty;
        await SendOtp(model.UserName);
    }

    public async Task UserSignup()
    {
        string Phone = string.Empty;
        string EmailAddress = string.Empty;
        List<int> staticRole = new List<int>();
        EncryptionClass encryption = new EncryptionClass();
        string IV = "Qz-N!p#ATb9_2MkL";
        string PASSWORD = "ledV\\K\"zRaNF]WXki,RMtLLZ{Cyr_1";
        staticRole.Add(1);

        if (isEmail)
            EmailAddress = model.UserName;
        else if (isPhone)
            Phone = model.UserName;

        SignUpModel registration = new SignUpModel()
        {
            Name = model.Name,
            Email = EmailAddress,
            PhoneNumber = Phone,
            Password = await encryption.EncryptAndEncode(model.Password, IV, PASSWORD),
            Roles = staticRole
        };
        var serializedValue = JsonSerializer.Serialize(registration);
        var stringContent = new StringContent(serializedValue, Encoding.UTF8, "application/json");
        var result = await Http.PostAsync("/api/signup", stringContent).ConfigureAwait(false);
        var responseData = await result.Content.ReadAsStringAsync();
        QRUsersResponse response = new QRUsersResponse();
        response = JsonSerializer.Deserialize<QRUsersResponse>(responseData);
        if (response.status == true)
        {
            displaySpinner = "d-none";
            navigationManager.NavigateTo("/");
        }
        else
        {
            message = response.message;
            messageType = Models.AlertMessageType.Error;
        }
        displaySpinner = "d-none";
    }

    public async Task RegisterUser()
    {
        System.Threading.Thread.Sleep(1000);
        if (isEmail)
        {
            await UserSignup();
        }
        else if (isPhone)
        {
            VerifyOTPModel verifyOtpModel = new VerifyOTPModel()
            {
                Phone = model.UserName,
                Code = model.Otp
            };
            var serializedValue = JsonSerializer.Serialize(verifyOtpModel);
            var stringContent = new StringContent(serializedValue, Encoding.UTF8, "application/json");
            var result = await Http.PostAsync("/api/qrverifyotp", stringContent).ConfigureAwait(false);
            var responseData = await result.Content.ReadAsStringAsync();
            Response response = new Response();
            response = JsonSerializer.Deserialize<Response>(responseData);
            if (response.status == true)
            {
                await UserSignup();
            }
            else
            {
                message = response.message;
                messageType = Models.AlertMessageType.Error;
            }
        }
        displaySpinner = "d-none";
    }
}